name: CI
on:
  workflow_dispatch:
  push:
    branches: [trunk]
  pull_request:
    branches: [trunk]
    types: [closed]
jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: setup node 16
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      # Cache every node_modules folder inside the monorepo
      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          # We use both yarn.lock and package.json as cache keys to ensure that changes to local monorepo packages bust the cache.
          key: ${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}
      - name: find location of global yarn cache
        id: yarn-cache
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: cache global yarn cache
        uses: actions/cache@v2
        if: steps.cache-modules.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn
      - name: lint
        run: yarn lint
      - name: test and upload coverage
        run: yarn test
  build:
    needs: lint-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      # Cache every node_modules folder inside the monorepo
      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          # We use both yarn.lock and package.json as cache keys to ensure that changes to local monorepo packages bust the cache.
          key: ${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}
      - name: find location of global yarn cache
        id: yarn-cache
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: cache global yarn cache
        uses: actions/cache@v2
        if: steps.cache-modules.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn install
      - name: build-packages
        run: |
          yarn tsc:full
          yarn build
      - uses: actions/upload-artifact@v2
        with:
          name: dist-types
          path: dist-types
  release:
    needs: build
    runs-on: ubuntu-latest
    env:
      CI: 'true'
      NODE_OPTIONS: --max-old-space-size=4096
    steps:
      - uses: actions/checkout@v2
      # Beginning of yarn setup, keep in sync between all workflows, see ci.yml
      - name: use node.js 16
        uses: actions/setup-node@v1
        with:
          node-version: '16'
          registry-url: https://registry.npmjs.org/ # Needed for auth
      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}
      - name: find location of global yarn cache
        id: yarn-cache
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: cache global yarn cache
        uses: actions/cache@v2
        if: steps.cache-modules.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn install --immutable
      # End of yarn setup
      # - name: build type declarations
      #   run: yarn tsc:full
      - name: build packages
        # uses the react-scripts build and tsc build for client
        run: |
          yarn tsc:full
          yarn build
      # Publishes current version of packages that are not already present in the registry
      - name: publish
        if: github.event.pull_request.head.ref == 'changeset-release/trunk'
        run: yarn lerna publish from-package --yes
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      # Creates the next available tag with format "release-<year>-<month>-<day>[.<n>]"
      - name: Create a release tag
        if: github.event.pull_request.head.ref == 'changeset-release/trunk'
        id: create_tag
        run: node scripts/create-release-tag.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Creates and updates the next available tag with format "latest"
      - name: Create latest release tag
        if: github.event.pull_request.head.ref == 'changeset-release/trunk'
        id: create_latest_tag
        uses: EndBug/latest-tag@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Convert the newly created tag into a release with changelog information
      - name: Create release on GitHub
        if: github.event.pull_request.head.ref == 'changeset-release/trunk'
        run: node scripts/create-github-release.js ${{ steps.create_tag.outputs.tag_name }} 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}